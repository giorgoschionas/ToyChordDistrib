# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import node_services_pb2 as node__services__pb2


class NodeServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FindSuccessor = channel.unary_unary(
                '/chord.NodeService/FindSuccessor',
                request_serializer=node__services__pb2.FindSuccessorRequest.SerializeToString,
                response_deserializer=node__services__pb2.FindSuccessorResponse.FromString,
                )
        self.Notify = channel.unary_unary(
                '/chord.NodeService/Notify',
                request_serializer=node__services__pb2.NotifyRequest.SerializeToString,
                response_deserializer=node__services__pb2.NotifyResponse.FromString,
                )
        self.LoadBalanceAfterJoin = channel.unary_unary(
                '/chord.NodeService/LoadBalanceAfterJoin',
                request_serializer=node__services__pb2.LoadBalanceAfterJoinRequest.SerializeToString,
                response_deserializer=node__services__pb2.LoadBalanceAfterJoinResponse.FromString,
                )
        self.LoadBalanceAfterDepart = channel.unary_unary(
                '/chord.NodeService/LoadBalanceAfterDepart',
                request_serializer=node__services__pb2.LoadBalanceAfterDepartRequest.SerializeToString,
                response_deserializer=node__services__pb2.LoadBalanceAfterDepartResponse.FromString,
                )
        self.QueryAll = channel.unary_unary(
                '/chord.NodeService/QueryAll',
                request_serializer=node__services__pb2.QueryAllRequest.SerializeToString,
                response_deserializer=node__services__pb2.QueryAllResponse.FromString,
                )
        self.OverlayAll = channel.unary_unary(
                '/chord.NodeService/OverlayAll',
                request_serializer=node__services__pb2.OverlayAllRequest.SerializeToString,
                response_deserializer=node__services__pb2.OverlayAllResponse.FromString,
                )
        self.Replicate = channel.unary_unary(
                '/chord.NodeService/Replicate',
                request_serializer=node__services__pb2.ReplicateRequest.SerializeToString,
                response_deserializer=node__services__pb2.ReplicateResponse.FromString,
                )


class NodeServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def FindSuccessor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Notify(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoadBalanceAfterJoin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoadBalanceAfterDepart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryAll(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OverlayAll(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Replicate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NodeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'FindSuccessor': grpc.unary_unary_rpc_method_handler(
                    servicer.FindSuccessor,
                    request_deserializer=node__services__pb2.FindSuccessorRequest.FromString,
                    response_serializer=node__services__pb2.FindSuccessorResponse.SerializeToString,
            ),
            'Notify': grpc.unary_unary_rpc_method_handler(
                    servicer.Notify,
                    request_deserializer=node__services__pb2.NotifyRequest.FromString,
                    response_serializer=node__services__pb2.NotifyResponse.SerializeToString,
            ),
            'LoadBalanceAfterJoin': grpc.unary_unary_rpc_method_handler(
                    servicer.LoadBalanceAfterJoin,
                    request_deserializer=node__services__pb2.LoadBalanceAfterJoinRequest.FromString,
                    response_serializer=node__services__pb2.LoadBalanceAfterJoinResponse.SerializeToString,
            ),
            'LoadBalanceAfterDepart': grpc.unary_unary_rpc_method_handler(
                    servicer.LoadBalanceAfterDepart,
                    request_deserializer=node__services__pb2.LoadBalanceAfterDepartRequest.FromString,
                    response_serializer=node__services__pb2.LoadBalanceAfterDepartResponse.SerializeToString,
            ),
            'QueryAll': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryAll,
                    request_deserializer=node__services__pb2.QueryAllRequest.FromString,
                    response_serializer=node__services__pb2.QueryAllResponse.SerializeToString,
            ),
            'OverlayAll': grpc.unary_unary_rpc_method_handler(
                    servicer.OverlayAll,
                    request_deserializer=node__services__pb2.OverlayAllRequest.FromString,
                    response_serializer=node__services__pb2.OverlayAllResponse.SerializeToString,
            ),
            'Replicate': grpc.unary_unary_rpc_method_handler(
                    servicer.Replicate,
                    request_deserializer=node__services__pb2.ReplicateRequest.FromString,
                    response_serializer=node__services__pb2.ReplicateResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'chord.NodeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class NodeService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def FindSuccessor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chord.NodeService/FindSuccessor',
            node__services__pb2.FindSuccessorRequest.SerializeToString,
            node__services__pb2.FindSuccessorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Notify(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chord.NodeService/Notify',
            node__services__pb2.NotifyRequest.SerializeToString,
            node__services__pb2.NotifyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LoadBalanceAfterJoin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chord.NodeService/LoadBalanceAfterJoin',
            node__services__pb2.LoadBalanceAfterJoinRequest.SerializeToString,
            node__services__pb2.LoadBalanceAfterJoinResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LoadBalanceAfterDepart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chord.NodeService/LoadBalanceAfterDepart',
            node__services__pb2.LoadBalanceAfterDepartRequest.SerializeToString,
            node__services__pb2.LoadBalanceAfterDepartResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chord.NodeService/QueryAll',
            node__services__pb2.QueryAllRequest.SerializeToString,
            node__services__pb2.QueryAllResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OverlayAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chord.NodeService/OverlayAll',
            node__services__pb2.OverlayAllRequest.SerializeToString,
            node__services__pb2.OverlayAllResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Replicate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chord.NodeService/Replicate',
            node__services__pb2.ReplicateRequest.SerializeToString,
            node__services__pb2.ReplicateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
